#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import math, ast
import actionlib
import rospy
from geometry_msgs.msg import Point, Quaternion, PoseWithCovarianceStamped, Twist
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from tf.transformations import quaternion_from_euler
from actionlib_msgs.msg import GoalStatus


class PatrolLimo(object):
    def __init__(self):
        rospy.init_node('patrol_limo', anonymous=True)

        # ---------- 파라미터 ----------
        self.init_x        = rospy.get_param('init_x', 0.0)
        self.init_y        = rospy.get_param('init_y', 0.0)
        self.init_yaw_deg  = rospy.get_param('init_yaw', 0.0)

        self.max_retries   = rospy.get_param('max_retries', 2)
        self.goal_timeout  = rospy.get_param('goal_timeout', 4.0)
        self.final_stop_publish = rospy.get_param('final_stop_publish', True)

        raw_pts = rospy.get_param(
                'patrol_points',
            [
            [-3.45,  0.31, 0],
            [-2.60,  3.82, 270],
            [ 1.03,  5.19, 270],
            [ 4.31,  3.55, 180],
            [ 0.12, -0.12, 90]
        ]
        )

        # --- 문자열로 들어온 경우 파싱 ---
        if isinstance(raw_pts, str):
            try:
                raw_pts = ast.literal_eval(raw_pts)
                rospy.logwarn("patrol_points 문자열을 ast.literal_eval 로 파싱했습니다.")
            except Exception as e:
                rospy.logerr("patrol_points 파싱 실패: %s", e)
                raw_pts = []

        # 좌표 정리
        clean = []
        for i, p in enumerate(raw_pts):
            if isinstance(p, (list, tuple)) and len(p) == 3:
                try:
                    clean.append((float(p[0]), float(p[1]), float(p[2])))
                except Exception:
                    rospy.logwarn("waypoint #%d 형 변환 실패: %s", i, p)
            else:
                rospy.logwarn("waypoint #%d 형식 오류: %s", i, p)

        if not clean:
            rospy.logerr("유효한 patrol_points 없음 → 노드 종료")
            return

        self.patrol_points = clean
        rospy.loginfo("적용된 waypoints (%d개): %s", len(self.patrol_points), self.patrol_points)

        # ---------- 퍼블리셔 ----------
        self.init_pub = rospy.Publisher(
            '/limo/initialpose',
            PoseWithCovarianceStamped,
            queue_size=1, latch=True)
        self.nav_cmd_pub = rospy.Publisher(
            '/cmd_vel_nav',
            Twist, queue_size=1)

        # ---------- 상태 ----------
        self.patrol_index    = 0
        self.is_goal_active  = False
        self.current_retries = 0
        self.goal_start_time = None

        # ---------- 초기 Pose 다회 전송 ----------
        self.publish_initial_pose(times=5, hz=5)

        # ---------- move_base 연결 ----------
        self.client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        if not self.client.wait_for_server(rospy.Duration(30.0)):
            rospy.logerr("move_base 연결 실패 - 종료")
            return
        rospy.loginfo("move_base 연결 성공")

        # 타임아웃 체크 타이머
        rospy.Timer(rospy.Duration(1.0), self.timeout_check_timer)

        # 첫 목표 전송
        self.send_next_goal()

    # ---------- 초기 포즈 ----------
    def publish_initial_pose(self, times=5, hz=5):
        r = rospy.Rate(hz)
        for _ in range(times):
            self.send_initial_pose(self.init_x, self.init_y, self.init_yaw_deg)
            r.sleep()

    def send_initial_pose(self, x, y, yaw_deg):
        msg = PoseWithCovarianceStamped()
        msg.header.stamp = rospy.Time.now()
        msg.header.frame_id = 'map'
        msg.pose.pose.position.x = x
        msg.pose.pose.position.y = y
        msg.pose.pose.orientation = Quaternion(*quaternion_from_euler(0, 0, math.radians(yaw_deg)))
        msg.pose.covariance = [0.0]*36
        msg.pose.covariance[0]  = 0.01
        msg.pose.covariance[7]  = 0.01
        msg.pose.covariance[35] = 0.05
        rospy.loginfo("초기 포즈 → x=%.2f y=%.2f yaw=%.1f°", x, y, yaw_deg)
        self.init_pub.publish(msg)

    # ---------- Goal 생성/전송 ----------
    def make_goal(self, x, y, yaw_deg):
        g = MoveBaseGoal()
        g.target_pose.header.frame_id = 'map'
        g.target_pose.header.stamp = rospy.Time.now()
        g.target_pose.pose.position = Point(x=x, y=y, z=0.0)
        g.target_pose.pose.orientation = Quaternion(*quaternion_from_euler(0, 0, math.radians(yaw_deg)))
        return g

    def send_next_goal(self):
        # patrol_index가 범위를 넘어가면 0으로 리셋해서 반복
        if self.patrol_index >= len(self.patrol_points):
            rospy.loginfo("[Patrol] 순찰 완료 → 처음부터 반복")
            self.patrol_index = 0

        x, y, yaw = self.patrol_points[self.patrol_index]
        goal = self.make_goal(x, y, yaw)

        rospy.loginfo("[Patrol] Goal #%d 전송: x=%.2f y=%.2f yaw=%.1f°",
                      self.patrol_index, x, y, yaw)
        self.is_goal_active = True
        self.current_retries = 0
        self.goal_start_time = rospy.Time.now()
        self.client.send_goal(goal, done_cb=self.done_cb)
        rospy.loginfo("DEBUG goal #%d send", self.patrol_index)

    # ---------- 콜백 ----------
    def done_cb(self, status, result):
        if not self.is_goal_active:
            return

        self.is_goal_active = False
        name = GoalStatus.to_string(status) if hasattr(GoalStatus, 'to_string') else str(status)
        rospy.loginfo("[Patrol] Goal #%d 결과: %s", self.patrol_index, name)

        if status == GoalStatus.SUCCEEDED:
            self.patrol_index += 1
            rospy.Timer(rospy.Duration(0.5), lambda evt: self.send_next_goal(), oneshot=True)
        else:
            if self.current_retries < self.max_retries:
                self.current_retries += 1
                rospy.logwarn("[Patrol] Goal #%d 실패 → 재시도 %d/%d",
                              self.patrol_index, self.current_retries, self.max_retries)
                rospy.Timer(rospy.Duration(1.0),
                            lambda evt: self.resend_current_goal(), oneshot=True)
            else:
                rospy.logerr("[Patrol] Goal #%d 재시도 초과 → 다음 목표로 이동", self.patrol_index)
                self.patrol_index += 1
                rospy.Timer(rospy.Duration(0.5),
                            lambda evt: self.send_next_goal(), oneshot=True)

    def resend_current_goal(self):
        if self.is_goal_active:
            return
        x, y, yaw = self.patrol_points[self.patrol_index]
        goal = self.make_goal(x, y, yaw)
        rospy.loginfo("[Patrol] Goal #%d 재전송 (retry %d/%d)",
                      self.patrol_index, self.current_retries, self.max_retries)
        self.is_goal_active = True
        self.goal_start_time = rospy.Time.now()
        self.client.send_goal(goal, done_cb=self.done_cb)

    # ---------- 타임아웃 ----------
    def timeout_check_timer(self, evt):
        if not self.is_goal_active or self.goal_start_time is None:
            return
        elapsed = (rospy.Time.now() - self.goal_start_time).to_sec()
        if elapsed > self.goal_timeout:
            rospy.logwarn("[Patrol] Goal #%d 타임아웃 (%.1fs > %.1fs) → cancel",
                          self.patrol_index, elapsed, self.goal_timeout)
            self.client.cancel_goal()

    # ---------- 종료 훅 ----------
    def shutdown(self):
        rospy.loginfo("patrol_limo 종료 중...")
        try:
            self.client.cancel_all_goals()
        except Exception:
            pass

def main():
    node = PatrolLimo()
    rospy.on_shutdown(node.shutdown)
    rospy.spin()

if __name__ == '__main__':
    main()
