#!/usr/bin/env python
# -*- coding: utf-8 -*-

import math, ast, random
import actionlib
import rospy
from geometry_msgs.msg import Point, Quaternion, PoseWithCovarianceStamped, Twist, PoseStamped
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from tf.transformations import quaternion_from_euler
from actionlib_msgs.msg import GoalStatus
from nav_msgs.msg import OccupancyGrid
from nav_msgs.srv import GetPlan, GetPlanRequest
from std_msgs.msg import String, Int32
import subprocess
from sound_play.libsoundplay import SoundClient
from geometry_msgs.msg import Twist


'''
## STT -> Input : voice -> Output : text -> int(num)
## STT_Node -> message type : Voice_Iput.msg   message name : /Voice_Iput
## input : voice -> output : int(num) ex) 1 : patrol, 2 : working 3. hand, 4. hello

'''


class Voicetest(object):


    def __init__(self):
        rospy.init_node('limo_voice_mode_one', anonymous=True)
        rospy.loginfo("STT Listener started, waiting for messages on /stt_topic")
        self.sub = rospy.Subscriber('/stt_topic', String, self.STTcallback)

        self.soundhandle = SoundClient()
         # /tts_topic 토픽을 구독하면, msg.data에 담긴 텍스트를 음성으로 변환해 재생
        rospy.Subscriber('/tts_topic', String, self.HI_TTScallback)
        rospy.Subscriber('/tts_topic', String, self.smlie_TTScallback)
        rospy.Subscriber('/tts_topic', String, self.sorry_TTScallback)
        rospy.Subscriber('/tts_topic', String, self.else_TTScallback)
        rospy.Subscriber('/tts_topic', String, self.go_spin_for_duration)
        rospy.loginfo("TTS node ready, waiting for text on /tts_topic")
        self.cmd_vel_pub_go = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
        self.cmd_vel_pub_back = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
        self.cmd_vel_pub_spin = rospy.Publisher('/cmd_vel', Twist, queue_size=10)


        # 1) 라치 퍼블리셔: /initialpose 메시지를 구독자가 없어도 버퍼에 저장
        self.init_pub = rospy.Publisher(
            '/limo/initialpose',
            PoseWithCovarianceStamped,
            queue_size=1,
            latch=True
        )

        # 2) 원하는 초기 위치 지정 및 반복 전송 (AMCL이 구독 준비할 시간 확보)
        init_x, init_y, init_yaw = 0.0, 0.0, 0.0  # 원하는 초기 위치/방향
        rate = rospy.Rate(5)  # 5Hz
        for _ in range(5):    # 총 1초간 5회 전송
            self.send_initial_pose(init_x, init_y, init_yaw)
            rate.sleep()

        # move_base 액션 클라이언트 생성 및 연결 대기
        self.client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        rospy.loginfo("move_base 액션 서버 연결 대기 중...")
        if not self.client.wait_for_server(rospy.Duration(5.0)):  # type: ignore
            rospy.logerr("move_base 액션 서버를 찾을 수 없습니다!")
            rospy.signal_shutdown("액션 서버 연결 실패")
            return

        self.patrol_points = [
            (3.17,  3.00,  0),
            (4.93,  0.82,  270),
            (6.14, -1.72,  200),
            (3.44, -5.33,  90),
            (0.14,  0.04,  0),
        ]


        self.patrol_index   = 0
        self.is_goal_active = False



    def shutdown(self):
        rospy.loginfo("Shutting down Voicetest node.")
        self.soundhandle.stopAll()  # 재생 중인 사운드 정지


    def STTcallback(self, msg):
        # rospy.loginfo text print
        rospy.loginfo("Received STT text: %s", msg.data)

        if msg.data == "인사" or msg.data == "인사하자":
            self.HI_TTScallback(msg)
        elif msg.data == "웃음" or msg.data == "웃자":
            self.smlie_TTScallback(msg)
        elif msg.data == "미안" or msg.data == "미안해":
            self.sorry_TTScallback(msg)
        elif msg.data == "앞으로" :
            self.go_forward_for_duration(2.0)  # 2.0초 동안 이동
        elif msg.data == "뒤로" :
            self.go_backward_for_duration(2.0)
        elif msg.data == "회전" :
            self.go_spin_for_duration(msg, 2.0)
        elif msg.data == "순찰 모드로 전환해줘" or msg.data == "순찰":
             self.patrol()
        elif msg.data == "나 집 왔어":
            rospy.loginfo("집에 도착했습니다. 순찰 모드 종료.")
            self.is_goal_active = True
            # self.shutdown()
        else:
            self.else_TTScallback(msg)
            

    def HI_TTScallback(self, msg):
        msg.data = "안녕하세요 제 이름은 리모입니다. 반갑습니다."
        text = msg.data
        rospy.loginfo("TTS -> “%s”" % text)

        # 1) espeak로 WAV 파일 생성 (임시)
        wav_path = '/tmp/tts_output.wav'
        cmd = ["espeak", "-v", "ko", "-s", "140", "-w", wav_path, text]
        subprocess.call(cmd)

        # 2) sound_play를 이용해 재생
        return self.soundhandle.playWave(wav_path)
    

    def smlie_TTScallback(self, msg):
        msg.data = "하하하호호호 웃음이 나네요."
        text = msg.data
        rospy.loginfo("TTS -> “%s”" % text)

        # 1) espeak로 WAV 파일 생성 (임시)
        wav_path = '/tmp/smile_tts_output.wav'
        cmd = ["espeak", "-v", "ko", "-s", "140", "-w", wav_path, text]
        subprocess.call(cmd)

        # 2) sound_play를 이용해 재생
        return self.soundhandle.playWave(wav_path)

    def sorry_TTScallback(self, msg):
        msg.data = "당연히 미안해 해야죠 하하하"
        text = msg.data
        rospy.loginfo("TTS -> “%s”" % text)

        # 1) espeak로 WAV 파일 생성 (임시)
        wav_path = '/tmp/sorry_tts_output.wav'
        cmd = ["espeak", "-v", "ko", "-s", "140", "-w", wav_path, text]
        subprocess.call(cmd)

        # 2) sound_play를 이용해 재생
        return self.soundhandle.playWave(wav_path)
    

    def go_forward_for_duration(self, duration=2.0):
        twist = Twist()
        twist.linear.x = 0.2  # 전진 속도
        twist.angular.z = 0.0

        rospy.loginfo("로봇 전진 시작 (%s초)", duration)
        self.cmd_vel_pub_go.publish(twist)

        rospy.sleep(duration)  # duration(초) 동안 대기

        twist.linear.x = 0.0  # 멈춤
        self.cmd_vel_pub_go.publish(twist)
        rospy.loginfo("로봇 정지 완료")

    def go_backward_for_duration(self, duration=2.0):
        twist = Twist()
        twist.linear.x = - 0.2  # 속도
        twist.angular.z = 0.0

        rospy.loginfo("로봇 전진 시작 (%s초)", duration)
        self.cmd_vel_pub_back.publish(twist)

        rospy.sleep(duration)  # duration(초) 동안 대기

        twist.linear.x = 0.0  # 멈춤
        self.cmd_vel_pub_back.publish(twist)
        rospy.loginfo("로봇 정지 완료")

    def go_spin_for_duration(self, msg,  duration=2.0):
        twist = Twist()
        twist.linear.x = 0.0
        twist.angular.z = 0.5  # 회전 속도  

        rospy.loginfo("로봇 회전 시작 (%s초)", duration)
        self.cmd_vel_pub_spin.publish(twist)

        rospy.sleep(duration)  # duration(초) 동안 대기     
        twist.angular.z = 0.0
        self.cmd_vel_pub_spin.publish(twist)
        rospy.loginfo("로봇 회전 완료")
        
        msg.data = "어질어질하네요 하하하"
        text = msg.data
        rospy.loginfo("TTS -> “%s”" % text)

        # 1) espeak로 WAV 파일 생성 (임시)
        wav_path = '/tmp/sorry_tts_output.wav'
        cmd = ["espeak", "-v", "ko", "-s", "140", "-w", wav_path, text]
        subprocess.call(cmd)

        # 2) sound_play를 이용해 재생
        return self.soundhandle.playWave(wav_path)


    def else_TTScallback(self, msg):
        msg.data = "아직 학습하지 못한 기능입니다. 알려주세요"
        text = msg.data
        rospy.loginfo("TTS -> “%s”" % text)

        # 1) espeak로 WAV 파일 생성 (임시)
        wav_path = '/tmp/else_tts_output.wav'
        cmd = ["espeak", "-v", "ko", "-s", "140", "-w", wav_path, text]
        subprocess.call(cmd)

        # 2) sound_play를 이용해 재생
        return self.soundhandle.playWave(wav_path)


    ## patrol code

    def send_initial_pose(self, x, y, yaw_deg):
        msg = PoseWithCovarianceStamped()
        msg.header.stamp    = rospy.Time.now()
        msg.header.frame_id = 'map'

        # 위치 설정
        msg.pose.pose.position.x = x
        msg.pose.pose.position.y = y
        msg.pose.pose.position.z = 0.0

        # 방향 설정 (Euler → Quaternion)
        yaw_rad = math.radians(yaw_deg)
        q = quaternion_from_euler(0, 0, yaw_rad)
        msg.pose.pose.orientation = Quaternion(*q)

        # 공분산 (36개 값). 필요에 따라 조정하세요.
        # 여기서는 작은 불확실도 예시로 0.01 사용
        msg.pose.covariance = [0.01] * 36

        rospy.loginfo(f"초기 포즈 전송 → x={x}, y={y}, yaw={yaw_deg}°")
        self.init_pub.publish(msg)

    def go_to_pose(self, x, y, yaw_deg):
        if self.is_goal_active:
            rospy.logwarn("이전 목표가 아직 활성화 상태입니다. 대기합니다.")
            return

        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = 'map'
        goal.target_pose.header.stamp    = rospy.Time.now()

        # 위치
        goal.target_pose.pose.position = Point(x=x, y=y, z=0.0)

        # 방향
        yaw_rad = math.radians(yaw_deg)
        q = quaternion_from_euler(0, 0, yaw_rad)
        goal.target_pose.pose.orientation = Quaternion(*q)

        rospy.loginfo(f"목표 전송 → x={x}, y={y}, yaw={yaw_deg}°")
        self.is_goal_active = True
        self.client.send_goal(
            goal,
            done_cb     = self.done_callback,
            feedback_cb = self.feedback_callback
        )

    def feedback_callback(self, feedback):
        # 필요 시 피드백 로그를 남길 수 있습니다.
        pass

    def done_callback(self, status, result) :
        if not self.is_goal_active:
            rospy.logwarn("비활성화된 목표에 대한 콜백 수신, 무시합니다.")
            return

        if status == actionlib.GoalStatus.SUCCEEDED:
            rospy.loginfo("목표에 성공적으로 도달했습니다!")
        else:
            rospy.logwarn(f"목표 달성 실패 (상태 코드: {status})")

        self.is_goal_active = False
        # 다음 지점으로 인덱스 증가 및 순환
        self.patrol_index = (self.patrol_index + 1) % len(self.patrol_points)
        # 2초 대기 후 다음 패트롤
        rospy.Timer(rospy.Duration(1.0), self.timer_callback, oneshot=True)  # type: ignore

    def timer_callback(self, event):
        self.patrol()

    def patrol(self):
        if rospy.is_shutdown():
            return
        x, y, yaw = self.patrol_points[self.patrol_index]
        self.go_to_pose(x, y, yaw)


def main() :
    node = Voicetest()
    rospy.on_shutdown(node.shutdown)
    rospy.spin()
    

if __name__ == '__main__':
    main()

